<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.dao.SsmUserDao">

    <resultMap type="com.ssm.entity.SsmUser" id="SsmUserMap">
        <result property="userId" column="user_id" jdbcType="INTEGER"/>
        <result property="userName" column="user_name" jdbcType="VARCHAR"/>
        <result property="nickName" column="nick_name" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="phonenumber" column="phonenumber" jdbcType="VARCHAR"/>
        <result property="sex" column="sex" jdbcType="VARCHAR"/>
        <result property="avatar" column="avatar" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="VARCHAR"/>
        <result property="delFlag" column="del_flag" jdbcType="VARCHAR"/>
        <result property="loginIp" column="login_ip" jdbcType="VARCHAR"/>
        <result property="loginDate" column="login_date" jdbcType="TIMESTAMP"/>
        <result property="createBy" column="create_by" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="VARCHAR"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <collection property="ssmRoles" ofType="com.ssm.entity.SsmRole">
            <id property="roleId" column="role_id"/>
            <result property="roleName" column="role_name"/>
            <result property="roleTag" column="role_tag"/>
            <collection property="ssmMenus" ofType="com.ssm.entity.SsmMenu">
                <id property="menuId" column="menu_id"/>
                <result property="menuName" column="menu_name"/>
                <result property="perms" column="perms"/>
            </collection>
        </collection>
    </resultMap>


    <select id="queryById" resultMap="SsmUserMap">
        select
user_id, user_name, nick_name, email, phonenumber, sex, avatar, password, status, del_flag, login_ip, login_date, create_by, create_time, update_by, update_time
        from SSM_user
        where user_id = #{userId}
    </select>

    <select id="queryByUserName" resultMap="SsmUserMap">
        select
            user_id, user_name, nick_name, email, phonenumber, sex, avatar, password, status, del_flag, login_ip, login_date, create_by, create_time, update_by, update_time
        from SSM_user
        where user_name = #{userName}
    </select>

    <select id="getInfo" resultMap="SsmUserMap">
        SELECT
            u.user_id user_id,
            user_name,
            nick_name,
            r.role_id,
            r.role_name,
            r.role_tag,
            m.menu_id,
            m.menu_name,
            m.perms
        FROM
            SSM_user u
                LEFT JOIN `SSM_user_role` ur ON u.user_id = ur.user_id
                LEFT JOIN SSM_role r ON ur.role_id = r.role_id
                LEFT JOIN SSM_role_menu rm ON r.role_id = rm.role_id
                LEFT JOIN SSM_menu m ON rm.menu_id = m.menu_id
        WHERE u.del_flag = 0 AND r.del_flag = 0 AND u.user_id = #{userId}
    </select>


    <select id="queryAllByLimit" resultMap="SsmUserMap">
        select
user_id, user_name, nick_name, email, phonenumber, sex, avatar, password, status, del_flag, login_ip, login_date, create_by, create_time, update_by, update_time
        from SSM_user
        <where>
            <if test="ssmUser.userId != null">
                and user_id = #{ssmUser.userId}
            </if>
            <if test="ssmUser.userName != null and ssmUser.userName != ''">
                and user_name = #{ssmUser.userName}
            </if>
            <if test="ssmUser.nickName != null and ssmUser.nickName != ''">
                and nick_name = #{ssmUser.nickName}
            </if>
            <if test="ssmUser.email != null and ssmUser.email != ''">
                and email = #{ssmUser.email}
            </if>
            <if test="ssmUser.phonenumber != null and ssmUser.phonenumber != ''">
                and phonenumber = #{ssmUser.phonenumber}
            </if>
            <if test="ssmUser.sex != null and ssmUser.sex != ''">
                and sex = #{ssmUser.sex}
            </if>
            <if test="ssmUser.avatar != null and ssmUser.avatar != ''">
                and avatar = #{ssmUser.avatar}
            </if>
            <if test="ssmUser.password != null and ssmUser.password != ''">
                and password = #{ssmUser.password}
            </if>
            <if test="ssmUser.status != null and ssmUser.status != ''">
                and status = #{ssmUser.status}
            </if>
            <if test="ssmUser.delFlag != null and ssmUser.delFlag != ''">
                and del_flag = #{ssmUser.delFlag}
            </if>
            <if test="ssmUser.loginIp != null and ssmUser.loginIp != ''">
                and login_ip = #{ssmUser.loginIp}
            </if>
            <if test="ssmUser.loginDate != null">
                and login_date = #{ssmUser.loginDate}
            </if>
            <if test="ssmUser.createBy != null and ssmUser.createBy != ''">
                and create_by = #{ssmUser.createBy}
            </if>
            <if test="ssmUser.createTime != null">
                and create_time = #{ssmUser.createTime}
            </if>
            <if test="ssmUser.updateBy != null and ssmUser.updateBy != ''">
                and update_by = #{ssmUser.updateBy}
            </if>
            <if test="ssmUser.updateTime != null">
                and update_time = #{ssmUser.updateTime}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>


    <select id="count" resultType="java.lang.Long">
        select count(1)
        from SSM_user
        <where>
            <if test="userId != null">
                and user_id = #{userId}
            </if>
            <if test="userName != null and userName != ''">
                and user_name = #{userName}
            </if>
            <if test="nickName != null and nickName != ''">
                and nick_name = #{nickName}
            </if>
            <if test="email != null and email != ''">
                and email = #{email}
            </if>
            <if test="phonenumber != null and phonenumber != ''">
                and phonenumber = #{phonenumber}
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>
            <if test="avatar != null and avatar != ''">
                and avatar = #{avatar}
            </if>
            <if test="password != null and password != ''">
                and password = #{password}
            </if>
            <if test="status != null and status != ''">
                and status = #{status}
            </if>
            <if test="delFlag != null and delFlag != ''">
                and del_flag = #{delFlag}
            </if>
            <if test="loginIp != null and loginIp != ''">
                and login_ip = #{loginIp}
            </if>
            <if test="loginDate != null">
                and login_date = #{loginDate}
            </if>
            <if test="createBy != null and createBy != ''">
                and create_by = #{createBy}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="updateBy != null and updateBy != ''">
                and update_by = #{updateBy}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
        </where>
    </select>


    <insert id="insert" keyProperty="userId" useGeneratedKeys="true">
        insert into SSM_user(user_name, nick_name, email, phonenumber, sex, avatar, password, status, del_flag, login_ip, login_date, create_by, create_time, update_by, update_time)
        values (#{userName},#{nickName},#{email},#{phonenumber},#{sex},#{avatar},#{password},#{status},#{delFlag},#{loginIp},#{loginDate},#{createBy},#{createTime},#{updateBy},#{updateTime})
    </insert>

    <insert id="insertBatch" keyProperty="userId" useGeneratedKeys="true">
        insert into SSM_user(user_name, nick_name, email, phonenumber, sex, avatar, password, status, del_flag, login_ip, login_date, create_by, create_time, update_by, update_time)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.userName},#{entity.nickName},#{entity.email},#{entity.phonenumber},#{entity.sex},#{entity.avatar},#{entity.password},#{entity.status},#{entity.delFlag},#{entity.loginIp},#{entity.loginDate},#{entity.createBy},#{entity.createTime},#{entity.updateBy},#{entity.updateTime})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="userId" useGeneratedKeys="true">
        insert into SSM_user(user_name, nick_name, email, phonenumber, sex, avatar, password, status, del_flag, login_ip, login_date, create_by, create_time, update_by, update_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.userName},#{entity.nickName},#{entity.email},#{entity.phonenumber},#{entity.sex},#{entity.avatar},#{entity.password},#{entity.status},#{entity.delFlag},#{entity.loginIp},#{entity.loginDate},#{entity.createBy},#{entity.createTime},#{entity.updateBy},#{entity.updateTime})
        </foreach>
        on duplicate key update
user_name = values(user_name),nick_name = values(nick_name),email = values(email),phonenumber = values(phonenumber),sex = values(sex),avatar = values(avatar),password = values(password),status = values(status),del_flag = values(del_flag),login_ip = values(login_ip),login_date = values(login_date),create_by = values(create_by),create_time = values(create_time),update_by = values(update_by),update_time = values(update_time)
    </insert>


    <update id="update">
        update SSM_user
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="nickName != null and nickName != ''">
                nick_name = #{nickName},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            <if test="phonenumber != null and phonenumber != ''">
                phonenumber = #{phonenumber},
            </if>
            <if test="sex != null and sex != ''">
                sex = #{sex},
            </if>
            <if test="avatar != null and avatar != ''">
                avatar = #{avatar},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="status != null and status != ''">
                status = #{status},
            </if>
            <if test="delFlag != null and delFlag != ''">
                del_flag = #{delFlag},
            </if>
            <if test="loginIp != null and loginIp != ''">
                login_ip = #{loginIp},
            </if>
            <if test="loginDate != null">
                login_date = #{loginDate},
            </if>
            <if test="createBy != null and createBy != ''">
                create_by = #{createBy},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateBy != null and updateBy != ''">
                update_by = #{updateBy},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
        </set>
        where user_id = #{userId}
    </update>


    <delete id="deleteById">
        delete from SSM_user where user_id = #{userId}
    </delete>

</mapper>

